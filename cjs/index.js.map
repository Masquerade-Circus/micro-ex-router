{"version":3,"file":"index.js","sources":["../lib/index.js"],"sourcesContent":["let micro = require('micro'),\n    urlencodedBodyParser = require('urlencoded-body-parser'),\n    url = require('url'),\n    qs = require('querystring');\n\nlet acceptedMethods = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options', 'use'];\n\n/**\n * Handles the mix of single and array of middlewares\n * @method parseMiddlewares\n * @param  {Function|Array}         middlewares     // Middleware or array of middlewares\n * @param  {Array}                  [array=[]]      // The array to store the final list of middlewares\n * @return {Array}                                  // The final list of middlewares\n */\nlet parseMiddlewares = (middlewares, array = []) => {\n    if (typeof middlewares === 'function') {\n        array.push(middlewares);\n        return array;\n    }\n\n    let i = 0, l = middlewares.length;\n    for (; i < l; i++) {\n        if (Array.isArray(middlewares[i])) {\n            parseMiddlewares(middlewares[i], array);\n        }\n\n        if (!Array.isArray(middlewares[i])) {\n            array.push(middlewares[i]);\n        }\n    }\n    return array;\n};\n\n/**\n * Adds a path to a router\n * @method addPath\n * @param  {Router} router              The router in which to add the path\n * @param  {String} method              The method that will handle this path\n * @param  {Array} args                The mixed params (String|Function|Array)\n */\nlet addPath = (router, method, args) => {\n    let path, middlewares;\n\n    // Get the first argument\n    if (typeof args[0] === 'string') {\n        path = args.shift();\n    }\n\n    // If the seccond argument is a function and has paths\n    // and regexpList properties then\n    // Treat it as a subrouter\n    if (\n        typeof args[0] === 'function' &&\n        args[0].paths !== undefined &&\n        args[0].regexpList !== undefined\n    ) {\n        let subrouter = args.shift(),\n            i = 0,\n            l = subrouter.paths.length;\n\n        // For each path of the subrouter\n        for (; i < l; i++) {\n            let submiddlewares = subrouter.paths[i].middlewares;\n            let submethod = subrouter.paths[i].method;\n            let subpath = subrouter.paths[i].path;\n\n            // If there is a path add it as prefix to the subpath\n            if (path !== undefined) {\n                subpath = path + (subpath || '*');\n            }\n\n            // If there are a subpath set it as the first element\n            // on the submiddlewares array\n            if (subpath !== undefined) {\n                submiddlewares.unshift(subpath);\n            }\n\n            // Add the path to the router\n            router = addPath(router, submethod, submiddlewares);\n        }\n    }\n\n    // Parse middlwares to handle mixed arrays of middlwares and sequenced middlwares\n    middlewares = parseMiddlewares(args);\n\n    // Add the path only if there are middlewares passed\n    if (middlewares.length > 0) {\n        // If the path wasn't set before, set the regexp and params list\n        if (path !== undefined && router.regexpList[path] === undefined) {\n            // Remove the last slash\n            path = path.replace(/\\/(\\?.*)?$/gi, '$1');\n\n            // Find the params like express params\n            let params = path.match(/:(\\w+)?/gi) || [];\n\n            // Set the names of the params found\n            for (let i in params) {\n                params[i] = params[i].replace(':', '');\n            }\n\n            let regexpPath = path\n                // Catch params\n                .replace(/:(\\w+)/gi, '([^\\\\s\\\\/]+)')\n                // To set to any url with the path as prefix\n                .replace(/\\*/g, '.*')\n                // Remove the last slash\n                .replace(/\\/(\\?.*)?$/gi, '$1');\n\n            // Set the object to the path\n            router.regexpList[path] = {\n                regexp : new RegExp('^' + regexpPath  + '/?(\\\\?.*)?$', 'gi'),\n                params: params\n            }\n        }\n\n        // Add the path to the paths list\n        router.paths.push({\n            method: method,\n            path: path,\n            middlewares: middlewares\n        });\n    }\n\n    return router;\n};\n\n/**\n * Parses the body according with its content-type\n * @method parseBody\n * @param  {Request}    req\n * @return {Void}\n */\nlet parseBody = async (req, opt) => {\n    /**\n     * Set the params property to an empty object\n     * @type {Object}\n     */\n    req.params = req.params || {};\n\n    /**\n     * Set the body property to undefined\n     * @type {Undefined}\n     */\n    req.body = undefined;\n\n    /**\n     * Set the query object\n     * The object returned by the querystring.parse() method does not prototypically inherit from the JavaScript Object.\n     * So we create a new object and merge its properties\n     * @type {Object}\n     */\n    req.query = Object.assign({}, qs.parse(url.parse(req.url).query));\n\n    /**\n     * If the method is other than get try to parse the body\n     * @method if\n     * @param  {Request} req\n     */\n    if (req.method.toLowerCase() !== 'get') {\n        let type = req.headers['content-type'],\n            parsed = false,\n            options = {\n                limit: opt.limit,\n                encoding: opt.encoding\n            },\n            body;\n\n        try {\n            if (type === 'application/json') {\n                parsed = true;\n                body = await micro.json(req, options);\n            }\n\n            if (type === 'application/x-www-form-urlencoded' && !parsed) {\n                parsed = true;\n                body = await urlencodedBodyParser(req, options);\n            }\n\n            if (type === 'text/html' && !parsed) {\n                parsed = true;\n                body = await micro.text(req, options);\n            }\n\n            if (!parsed) {\n                body = await micro.buffer(req, options);\n            }\n        } catch (e) {\n\n        }\n\n        req.body = body;\n    }\n};\n\nlet RouterFactory = (options = {}) => {\n    let opt = Object.assign({}, { limit: '1mb', encoding: 'utf8' }, options);\n\n    /**\n     * new Rotuer\n     * @param  {Request}    req     NodeJs Request object\n     * @param  {Response}   res     NodeJs Response object\n     * @return {Function}           The async function to be passed to micro\n     */\n    let Router = async function (req, res) {\n        let method = req.method.toLowerCase(),\n            params = {},\n            middlewares = [],\n            response,\n            i = 0,\n            l = Router.paths.length;\n\n        for (; i < l; i++) {\n            let path = Router.paths[i];\n            if (method !== path.method && path.method !== 'use') {\n                continue;\n            }\n\n            if ((path.method === 'use' || method === path.method) && path.path === undefined) {\n                middlewares = parseMiddlewares(path.middlewares, middlewares);\n                continue;\n            }\n\n            let matches = Router.regexpList[path.path].regexp.exec(req.url);\n            Router.regexpList[path.path].regexp.lastIndex = -1;\n            if (Array.isArray(matches)) {\n                matches.shift();\n                let l = Router.regexpList[path.path].params.length;\n                for (; l--;) {\n                    if (params[Router.regexpList[path.path].params[l]] === undefined) {\n                        params[Router.regexpList[path.path].params[l]] = matches[l];\n                    }\n                }\n                middlewares = parseMiddlewares(path.middlewares, middlewares);\n            }\n        }\n\n        if (middlewares.length > 0) {\n            await parseBody(req, opt);\n            req.params = params;\n\n            let i = 0, l = middlewares.length;\n            // call sequentially every middleware\n            for (; i < l; i++) {\n                response = await middlewares[i](req, res);\n                // If there is a response or a response was sent to the client\n                // break the for block\n                if (response !== undefined || res.headersSent) {\n                    break;\n                }\n            }\n\n            // If there is a response and no other response was sent to the client\n            // return the response\n            if (response !== undefined && !res.headersSent) {\n                return response;\n            }\n        }\n\n        // If no response was sent to the client throw an error\n        if (!res.headersSent) {\n            throw new Error(`The url ${req.url} requested by ${method}, wasn't found`);\n        }\n    };\n\n    /**\n     * Where to store the paths and its middlewares\n     * @type {Object}\n     */\n    Router.paths = [];\n\n    /**\n     * Where to store the regexp and params list for the paths\n     * @type {[type]}\n     */\n    Router.regexpList = {};\n\n    /**\n     * For each accepted method, add the method to the router\n     * @type {Array}\n     */\n    acceptedMethods.map(method => {\n        Router[method] = (...args) => addPath(Router, method, args);\n    });\n\n    /**\n     * Return the new router\n     * @type {Router}\n     */\n    return Router;\n};\n\nmodule.exports = RouterFactory;\n"],"names":["acceptedMethods","parseMiddlewares","middlewares","array","push","i","l","length","Array","isArray","addPath","router","method","args","path","shift","paths","undefined","regexpList","subrouter","submiddlewares","submethod","subpath","unshift","replace","params","match","regexpPath","RegExp","parseBody","req","opt","body","query","Object","assign","qs","parse","url","toLowerCase","headers","parsed","options","limit","encoding","type","micro","json","urlencodedBodyParser","text","buffer","RouterFactory","Router","res","response","regexp","exec","lastIndex","matches","headersSent","Error","map"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAKA,IAAIA,kBAAkB,CAAC,KAAD,EAAQ,MAAR,EAAgB,KAAhB,EAAuB,OAAvB,EAAgC,QAAhC,EAA0C,MAA1C,EAAkD,SAAlD,EAA6D,KAA7D,CAAtB;;;;;;;;;AASA,IAAIC,mBAAmB,SAAnBA,gBAAmB,CAACC,WAAD,EAA6B;QAAfC,KAAe,uEAAP,EAAO;;QAC5C,OAAOD,WAAP,KAAuB,UAA3B,EAAuC;cAC7BE,IAAN,CAAWF,WAAX;eACOC,KAAP;;;QAGAE,IAAI,CAAR;QAAWC,IAAIJ,YAAYK,MAA3B;WACOF,IAAIC,CAAX,EAAcD,GAAd,EAAmB;YACXG,MAAMC,OAAN,CAAcP,YAAYG,CAAZ,CAAd,CAAJ,EAAmC;6BACdH,YAAYG,CAAZ,CAAjB,EAAiCF,KAAjC;;;YAGA,CAACK,MAAMC,OAAN,CAAcP,YAAYG,CAAZ,CAAd,CAAL,EAAoC;kBAC1BD,IAAN,CAAWF,YAAYG,CAAZ,CAAX;;;WAGDF,KAAP;CAhBJ;;;;;;;;;AA0BA,IAAIO,UAAU,SAAVA,OAAU,CAACC,MAAD,EAASC,MAAT,EAAiBC,IAAjB,EAA0B;QAChCC,aAAJ;QAAUZ,oBAAV;;;QAGI,OAAOW,KAAK,CAAL,CAAP,KAAmB,QAAvB,EAAiC;eACtBA,KAAKE,KAAL,EAAP;;;;;;QAOA,OAAOF,KAAK,CAAL,CAAP,KAAmB,UAAnB,IACAA,KAAK,CAAL,EAAQG,KAAR,KAAkBC,SADlB,IAEAJ,KAAK,CAAL,EAAQK,UAAR,KAAuBD,SAH3B,EAIE;YACME,YAAYN,KAAKE,KAAL,EAAhB;YACIV,IAAI,CADR;YAEIC,IAAIa,UAAUH,KAAV,CAAgBT,MAFxB;;;eAKOF,IAAIC,CAAX,EAAcD,GAAd,EAAmB;gBACXe,iBAAiBD,UAAUH,KAAV,CAAgBX,CAAhB,EAAmBH,WAAxC;gBACImB,YAAYF,UAAUH,KAAV,CAAgBX,CAAhB,EAAmBO,MAAnC;gBACIU,UAAUH,UAAUH,KAAV,CAAgBX,CAAhB,EAAmBS,IAAjC;;;gBAGIA,SAASG,SAAb,EAAwB;0BACVH,QAAQQ,WAAW,GAAnB,CAAV;;;;;gBAKAA,YAAYL,SAAhB,EAA2B;+BACRM,OAAf,CAAuBD,OAAvB;;;;qBAIKZ,QAAQC,MAAR,EAAgBU,SAAhB,EAA2BD,cAA3B,CAAT;;;;;kBAKMnB,iBAAiBY,IAAjB,CAAd;;;QAGIX,YAAYK,MAAZ,GAAqB,CAAzB,EAA4B;;YAEpBO,SAASG,SAAT,IAAsBN,OAAOO,UAAP,CAAkBJ,IAAlB,MAA4BG,SAAtD,EAAiE;;mBAEtDH,KAAKU,OAAL,CAAa,cAAb,EAA6B,IAA7B,CAAP;;;gBAGIC,SAASX,KAAKY,KAAL,CAAW,WAAX,KAA2B,EAAxC;;;iBAGK,IAAIrB,EAAT,IAAcoB,MAAd,EAAsB;uBACXpB,EAAP,IAAYoB,OAAOpB,EAAP,EAAUmB,OAAV,CAAkB,GAAlB,EAAuB,EAAvB,CAAZ;;;gBAGAG,aAAab;;aAEZU,OAFY,CAEJ,UAFI,EAEQ,cAFR;;aAIZA,OAJY,CAIJ,KAJI,EAIG,IAJH;;aAMZA,OANY,CAMJ,cANI,EAMY,IANZ,CAAjB;;;mBASON,UAAP,CAAkBJ,IAAlB,IAA0B;wBACb,IAAIc,MAAJ,CAAW,MAAMD,UAAN,GAAoB,aAA/B,EAA8C,IAA9C,CADa;wBAEdF;aAFZ;;;;eAOGT,KAAP,CAAaZ,IAAb,CAAkB;oBACNQ,MADM;kBAERE,IAFQ;yBAGDZ;SAHjB;;;WAOGS,MAAP;CAnFJ;;;;;;;;AA4FA,IAAIkB;wDAAY,iBAAOC,GAAP,EAAYC,GAAZ;;;;;;;;;;4BAKRN,MAAJ,GAAaK,IAAIL,MAAJ,IAAc,EAA3B;;;;;;4BAMIO,IAAJ,GAAWf,SAAX;;;;;;;;4BAQIgB,KAAJ,GAAYC,OAAOC,MAAP,CAAc,EAAd,EAAkBC,YAAGC,KAAH,CAASC,IAAID,KAAJ,CAAUP,IAAIQ,GAAd,EAAmBL,KAA5B,CAAlB,CAAZ;;;;;;;;8BAOIH,IAAIlB,MAAJ,CAAW2B,WAAX,OAA6B,KA1BrB;;;;;4BAAA,GA2BGT,IAAIU,OAAJ,CAAY,cAAZ,CA3BH,EA4BJC,MA5BI,GA4BK,KA5BL,EA6BJC,OA7BI,GA6BM;mCACCX,IAAIY,KADL;sCAEIZ,IAAIa;yBA/Bd,EAiCJZ,IAjCI;;;8BAoCAa,SAAS,kBApCT;;;;;iCAqCS,IAAT;;+BACaC,MAAMC,IAAN,CAAWjB,GAAX,EAAgBY,OAAhB,CAtCb;;;4BAAA;;;8BAyCAG,SAAS,mCAAT,IAAgD,CAACJ,MAzCjD;;;;;iCA0CS,IAAT;;+BACaO,qBAAqBlB,GAArB,EAA0BY,OAA1B,CA3Cb;;;4BAAA;;;8BA8CAG,SAAS,WAAT,IAAwB,CAACJ,MA9CzB;;;;;iCA+CS,IAAT;;+BACaK,MAAMG,IAAN,CAAWnB,GAAX,EAAgBY,OAAhB,CAhDb;;;4BAAA;;;4BAmDCD,MAnDD;;;;;;+BAoDaK,MAAMI,MAAN,CAAapB,GAAb,EAAkBY,OAAlB,CApDb;;;4BAAA;;;;;;;;;;;;4BA0DJV,IAAJ,GAAWA,IAAX;;;;;;;;KA1DJ;;;;;GAAJ;;AA8DA,IAAImB,gBAAgB,SAAhBA,aAAgB,GAAkB;QAAjBT,OAAiB,uEAAP,EAAO;;QAC9BX,MAAMG,OAAOC,MAAP,CAAc,EAAd,EAAkB,EAAEQ,OAAO,KAAT,EAAgBC,UAAU,MAA1B,EAAlB,EAAsDF,OAAtD,CAAV;;;;;;;;QAQIU;6DAAS,kBAAgBtB,GAAhB,EAAqBuB,GAArB;;;;;;;kCAAA,GACIvB,IAAIlB,MAAJ,CAAW2B,WAAX,EADJ,EAELd,MAFK,GAEI,EAFJ,EAGLvB,WAHK,GAGS,EAHT,EAILoD,QAJK,WAKLjD,CALK,GAKD,CALC,EAMLC,CANK,GAMD8C,OAAOpC,KAAP,CAAaT,MANZ;;;kCAQFF,IAAIC,CARF;;;;;gCAAA,GASM8C,OAAOpC,KAAP,CAAaX,CAAb,CATN;;kCAUDO,WAAWE,KAAKF,MAAhB,IAA0BE,KAAKF,MAAL,KAAgB,KAVzC;;;;;;;;kCAcD,CAACE,KAAKF,MAAL,KAAgB,KAAhB,IAAyBA,WAAWE,KAAKF,MAA1C,KAAqDE,KAAKA,IAAL,KAAcG,SAdlE;;;;;0CAeahB,iBAAiBa,KAAKZ,WAAtB,EAAmCA,WAAnC,CAAd;;;;mCAfC,GAmBSkD,OAAOlC,UAAP,CAAkBJ,KAAKA,IAAvB,EAA6ByC,MAA7B,CAAoCC,IAApC,CAAyC1B,IAAIQ,GAA7C,CAnBT;;mCAoBEpB,UAAP,CAAkBJ,KAAKA,IAAvB,EAA6ByC,MAA7B,CAAoCE,SAApC,GAAgD,CAAC,CAAjD;gCACIjD,MAAMC,OAAN,CAAciD,OAAd,CAAJ,EAA4B;wCAChB3C,KAAR;kCADwB,GAEhBqC,OAAOlC,UAAP,CAAkBJ,KAAKA,IAAvB,EAA6BW,MAA7B,CAAoClB,MAFpB;;uCAGjBD,IAAP,GAAa;wCACLmB,OAAO2B,OAAOlC,UAAP,CAAkBJ,KAAKA,IAAvB,EAA6BW,MAA7B,CAAoCnB,EAApC,CAAP,MAAmDW,SAAvD,EAAkE;+CACvDmC,OAAOlC,UAAP,CAAkBJ,KAAKA,IAAvB,EAA6BW,MAA7B,CAAoCnB,EAApC,CAAP,IAAiDoD,QAAQpD,EAAR,CAAjD;;;8CAGML,iBAAiBa,KAAKZ,WAAtB,EAAmCA,WAAnC,CAAd;;;;+BA7BC;;;;;kCAiCLA,YAAYK,MAAZ,GAAqB,CAjChB;;;;;;mCAkCCsB,UAAUC,GAAV,EAAeC,GAAf,CAlCD;;;gCAmCDN,MAAJ,GAAaA,MAAb;;+BAnCK,GAqCG,CArCH,EAqCMnB,GArCN,GAqCUJ,YAAYK,MArCtB;;;;kCAuCEF,MAAIC,GAvCN;;;;;;mCAwCgBJ,YAAYG,GAAZ,EAAeyB,GAAf,EAAoBuB,GAApB,CAxChB;;;oCAAA;;kCA2CGC,aAAarC,SAAb,IAA0BoC,IAAIM,WA3CjC;;;;;;;;iCAAA;;;;;kCAkDDL,aAAarC,SAAb,IAA0B,CAACoC,IAAIM,WAlD9B;;;;;8DAmDML,QAnDN;;;gCAwDJD,IAAIM,WAxDA;;;;;kCAyDC,IAAIC,KAAJ,cAAqB9B,IAAIQ,GAAzB,sBAA6C1B,MAA7C,qBAzDD;;;;;;;;SAAT;;;;;OAAJ;;;;;;WAiEOI,KAAP,GAAe,EAAf;;;;;;WAMOE,UAAP,GAAoB,EAApB;;;;;;oBAMgB2C,GAAhB,CAAoB,kBAAU;eACnBjD,MAAP,IAAiB;8CAAIC,IAAJ;oBAAA;;;mBAAaH,QAAQ0C,MAAR,EAAgBxC,MAAhB,EAAwBC,IAAxB,CAAb;SAAjB;KADJ;;;;;;WAQOuC,MAAP;CA9FJ;;AAiGA,YAAiBD,aAAjB;;;;"}