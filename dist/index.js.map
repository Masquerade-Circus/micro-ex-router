{"version":3,"file":"index.js","sources":["../lib/index.js"],"sourcesContent":["\nlet acceptedMethods = ['get', 'post', 'put', 'patch', 'delete', 'head', 'options'];\n\n/**\n * Adds a path to a router\n * @method addPath\n * @param  {Router} router              The router in which to add the path\n * @param  {String} method              The method that will handle this path\n * @param  {String} path                The path to handle\n * @param  {Function|Array} middleware  Middleware function or an array of middlewares to be called when the path matches\n */\nlet addPath = (router, method, path, middleware) => {\n    // Find the params like express params\n    let params = path.match(/:(\\w+)?/gi);\n\n    // Set the names of the params found\n    if (Array.isArray(params)) {\n        for (let i in params) {\n            params[i] = params[i].replace(':', '');\n        }\n    }\n\n    // Adds the path to the selected method\n    router.paths[method][path] = {\n        // RegExp that will be used to match against the requested path\n        regexp : () => new RegExp('^' + path.replace(/:(\\w+)/gi, \"(\\\\w+)\") + '/?$', 'gi'),\n        // The name of the params if any\n        params: params,\n        // The middleware(s) to call when this path matches\n        middleware: middleware\n    };\n\n    // return the pased router\n    return router;\n};\n\n\nlet RouterFactory = () => {\n\n    /**\n     * new Rotuer\n     * @param  {Request}    req     NodeJs Request object\n     * @param  {Response}   res     NodeJs Response object\n     * @return {Function}           The async function to be passed to micro\n     */\n    let Router = async function (req, res) {\n        let urls = Router.paths[req.method.toLowerCase()];\n        let middleware;\n\n        // Find first matched url\n        for (let i in urls) {\n            let matches = urls[i].regexp().exec(req.url);\n            if (Array.isArray(matches)) {\n                matches.shift();\n                req.params = {};\n                for (let k in urls[i].params) {\n                    req.params[urls[i].params[k]] = matches[k];\n                }\n                middleware = urls[i].middleware;\n                break;\n            }\n        }\n\n        // If there is an url match\n        if (middleware !== undefined) {\n            let response;\n\n            // Call the use middlewares\n            let l = Router.useMiddlewares.length, i = 0;\n\n            for (; i < l; i++) {\n                response = await Router.useMiddlewares[i](req, res);\n                if (response !== undefined || res.headersSent) {\n                    return response;\n                }\n            }\n\n            // if middleware is an array of middlewares call them sequentially\n            if (Array.isArray(middleware)) {\n                let l = middleware.length, i = 0;\n                // call sequentially every middleware\n                for (; i < l; i++) {\n                    response = await middleware[i](req, res);\n                    if (response !== undefined || res.headersSent) {\n                        return response;\n                    }\n                }\n            }\n\n            // If middleware it's not an array, call it and return its response\n            return await middleware(req, res);\n        }\n\n        // If no url is matched throw a new error\n        throw new Error(`The url ${req.url} requested by ${req.method.toLowerCase()}, wasn't found`);\n    };\n\n    /**\n     * Where to store the paths and its middlewares\n     * @type {Object}\n     */\n    Router.paths = {};\n\n    /**\n     * Where to store the use middlewares\n     * @type {Array}\n     */\n    Router.useMiddlewares = [];\n\n    /**\n     * Use method to add middlewares for every path\n     * @method use\n     * @param  {Function} middleware    The middleware to add\n     * @return {Router}\n     */\n    Router.use = middleware => {\n        Router.useMiddlewares.push(middleware);\n        return Router;\n    };\n\n    /**\n     * For each accepted method, add the method to the router\n     * @type {Array}\n     */\n    acceptedMethods.map(method => {\n        Router.paths[method] = {};\n        Router[method] = (path, middleware) => addPath(Router, method, path, middleware);\n    });\n\n    /**\n     * Return the new router\n     * @type {Router}\n     */\n    return Router;\n};\n\nmodule.exports = RouterFactory;\n"],"names":["acceptedMethods","addPath","router","method","path","middleware","params","match","Array","isArray","i","replace","paths","RegExp","RouterFactory","Router","req","res","toLowerCase","urls","regexp","exec","url","matches","shift","k","undefined","useMiddlewares","length","l","response","headersSent","Error","use","push","map","module","exports"],"mappings":"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"}